openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
  description: API for user management, including user details, signup, login, and subscriptions.

servers:
  - url: http://localhost:80

components:
  schemas:
    Username:
      type: string
      format: email
      description: Must be a valid email address.
    Password:
      type: string
      pattern: '^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])(?=.*\S).{10,72}$'
      description: Password must be between 10 and 72 characters, contain at least one uppercase letter, one digit, one special character, and no spaces.
    RegisterRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
    ChangePasswordRequest:
      type: object
      required:
        - username
        - oldPassword
        - newPassword
      properties:
        username:
          $ref: '#/components/schemas/Username'
        oldPassword:
          $ref: '#/components/schemas/Password'
        newPassword:
          $ref: '#/components/schemas/Password'
    UnsubscribeResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Unsubscribed successfully"

paths:
  /users/{id}:
    get:
      summary: Retrieve user details
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: User details and follower count
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  followerCount:
                    type: integer
                  totalEarnings:
                    type: integer
              example:
                username: gawrgura
                followerCount: 100
                totalEarnings: 500

  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input

  /users/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Invalid credentials

  /users/changePassword:
    patch:
      summary: Change user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid input or incorrect old password

  /users/{id}/subscribe:
    post:
      summary: Subscribe to another user (streamer)
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to subscribe
          schema:
            type: string
      responses:
        '200':
          description: Subscription success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "success"

  /users/{id}/unsubscribe:
    delete:
      summary: Unsubscribe from another user
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to unsubscribe from
          schema:
            type: string
      responses:
        '200':
          description: Unsubscription success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsubscribeResponse'
        '404':
          description: User not found or not subscribed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "User not found or not subscribed"